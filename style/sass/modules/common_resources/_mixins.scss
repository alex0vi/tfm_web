/**
Cross brownser way to make border radius.
*/
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

/**
adds an opacity transtion
*/
@mixin transitionOpacity() {
  transition: opacity 1s ease;
}


/**
Cross brownser way to make border radius.
*/
@mixin topLeftBottomRight($position) {
  top: $position;
  left: $position;
  right: $position;
  bottom: $position;
}

/*
shorthand to make box-shadow
box-shadow: none|h-shadow v-shadow blur spread color |inset|initial|inherit;
*/
@mixin cast-shadow($up, $right, $down, $left, $color) { //Todo: the parameters are wrongly named. Try to fix it.
  // creates a shadow. it addes the 3 versions of the instruction
  -moz-box-shadow: $up $right $down $left $color;
  -webkit-box-shadow: $up $right $down $left $color;
  box-shadow: $up $right $down $left $color;
}


/**
opacity lets us to change the opacity of an element by including it into its sass
*/
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}


/* 4. Animations and keyframes */

/* Animations are always a pain to create with all the vendor prefixes and what not. But with the help of this
 mixin it will boil down to just a few lines of code.


Usage
@include keyframes(slide-down) {
  0% { opacity: 1; }
  90% { opacity: 0; }
}

.element {
  width: 100px;
  height: 100px;
  background: black;
  @include animation('slide-down 5s 3');
}
*/


@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin triangleUp($color, $size) {
  width: 0;
  height: 0;
  border-left: $size*0.5 solid transparent;
  border-right: $size*0.5 solid transparent;
  border-bottom: $size solid $color;
}

@mixin triangleBottom($color, $size) {
  width: 0;
  height: 0;
  border-left: $size*0.5 solid transparent;
  border-right: $size*0.5 solid transparent;
  border-top: $size solid $color;
}

@mixin triangleRight($color, $size) {
  width: 0;
  height: 0;
  border-bottom: $size*0.5 solid transparent;
  border-top: $size*0.5 solid transparent;
  border-left: $size solid $color;
  border-right: 0 none transparent;
}

@mixin triangleLeft($color, $size) {
  width: 0;
  height: 0;
  border-bottom: $size*0.5 solid transparent;
  border-top: $size*0.5 solid transparent;
  border-right: $size solid $color;
  border-left: 0 none transparent;
}

@mixin triangleUpConf($color, $height, $width) {
  width: 0;
  height: 0;
  border-left: $height*0.5 solid transparent;
  border-right: $height*0.5 solid transparent;
  border-bottom: $width solid $color;
}

@mixin triangleRightConf($color, $height, $width) {
  width: 0;
  height: 0;
  border-bottom: $height*0.5 solid transparent;
  border-top: $height*0.5 solid transparent;
  border-left: $width solid $color;
}

@mixin triangleLeftConf($color, $height, $width) {
  width: 0;
  height: 0;
  border-bottom: $height*0.5 solid transparent;
  border-top: $height*0.5 solid transparent;
  border-right: $width solid $color;
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

/*5. Transitions

As with animations, transitions also make your code quite bloated which can hurt the readability. But this is also
 solved by using a mixin for it.

Usage
a {
  color: gray;
  @include transition(color .3s ease);
  &:hover {
    color: black;
  }
}*/

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}



@mixin transition1($property) {
  -webkit-transition: $property 0.5s ease;
  -moz-transition: $property 0.5s ease;
  -ms-transition: $property 0.5s ease;
  -o-transition: $property 0.5s ease;
  transition: $property 0.5s ease;
}

@mixin transition2($property1, $property2) {
  transition: $property1 0.5s ease, $property2 0.5s ease;
}

@mixin transition3($property1, $property2, $property3) {
  transition: $property1 0.5s ease, $property2 0.5s ease, $property3 0.5s ease;
}


@mixin transition5($property1, $property2, $property3, $property4, $property5) {
  transition: $property1 0.5s ease, $property2 0.5s ease, $property3 0.5s ease, $property4 0.5s ease, $property5 0.5s ease;
}



@mixin transition1T($property, $t) {
  transition: $property $t ease;
}

@mixin transition2T($property1, $property2, $t) {
  transition: $property1 $t ease, $property2 $t ease;
}

@mixin transition3T($property1, $property2, $property3, $t) {
  transition: $property1 $t ease, $property2 $t ease, $property3 $t ease;
}


@mixin transition5T($property1, $property2, $property3, $property4, $property5, $t) {
  transition: $property1 $t ease, $property2 $t ease, $property3 $t ease, $property4 $t ease, $property5 $t ease;
}



/* only background transparency */
@mixin transparent_background($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  background-color: $color; // fallback for not compatible brownsers
  background-color: $rgba;
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
  zoom: 1;
}


//@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white,  50%)) {
//  // For Google Chrome
//  ::-webkit-scrollbar {
//    width:  $size;
//    height: $size;
//  }
//
//  ::-webkit-scrollbar-thumb {
//    background: $foreground-color;
//  }
//
//  ::-webkit-scrollbar-track {
//    background: $background-color;
//  }
//
//  // For Internet Explorer
//  body {
//    scrollbar-face-color: $foreground-color;
//    scrollbar-track-color: $background-color;
//  }
//}


@mixin disable_selection() {
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none;   /* Chrome/Safari/Opera */
  -khtml-user-select: none;    /* Konqueror */
  -moz-user-select: none;      /* Firefox */
  -ms-user-select: none;       /* Internet Explorer/Edge */
  user-select: none;           /* Non-prefixed version, currently
                                  not supported by any browser */
}


@mixin outline_text($size, $color, $bgColor) {
    color: $bgColor;
    text-shadow: (-$size) (-$size) 0 $color,
                    $size  (-$size) 0 $color,
                 (-$size)    $size  0 $color,
                    $size     $size  0 $color;

}
